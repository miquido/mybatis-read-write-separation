plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.5.31'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.miquido'
version '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.21'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.4'
    implementation 'org.aspectj:aspectjweaver:1.9.7'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'io.mockk:mockk:1.12.0'
    runtimeOnly 'org.aspectj:aspectjrt:1.9.7'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mybatis-read-write-separation'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'MyBatis read/write separation'
                description = 'Kotlin library providing read/write separation for Spring + MyBatis applications.'
                url = 'https://github.com/miquido/mybatis-read-write-separation'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'patrycja.gajewska@miquido.com'
                        name = 'Patrycja Gajewska'
                        email = 'patrycja.gajewska@miquido.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:miquido/mybatis-read-write-separation.git'
                    developerConnection = 'scm:git:ssh://github.com:miquido/mybatis-read-write-separation.git'
                    url = 'https://github.com/miquido/mybatis-read-write-separation'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}